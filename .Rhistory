library(datasets)
data(iris)
?iris
head(iris)
apply(iris[,1],mean,iris$Species=="virginica")
apply(iris, mean, iris$Species="virginica")
apply(iris[,1], mean, iris$Species="virginica")
apply(iris[,1], mean)
split(iris[,1],mean,iris$Species="virginica")
iris[,1]
s<-split(iris,iris$Species)
head(s)
nrow(s)
nrows(s)
nrow[s]
s<-split(iris,iris$Species="virginica")
sapply(s,colmeans(x))
sapply(s,colmean(x))
sapply(s,colMeans(x))
colMeans(s)
colMeans(s[,1])
x<-list(a=1:5,b=rnorm(10))
lapply(x,mean)
x
iris[,1]
mean(iris[,1])
x<-split(iris[,1],iris$Species)
x
mean(X)
mean(x)
lapply(x,mean)
lapply(x,mean)
apply(iris[,1:4],2,mean)
colMean(iris)
colMeans(iris)
apply(iris,2,mean)
apply(iris,1,mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
apply(mtcars,2,mean)
split(mtcars,mtcars$cyl)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
tapply(mtcars$cyl,mtcars$mpg,mean)
s<-split(mtcars$hp,mtcars$cyl)
s
x<-(s,mean)
x<-sapply(s,mean)
x
answer<-x[4]-x[8]
answer
answer<-x[1]-x[3]
answer
answer<-abs(x[1]-x[3])
ans
str(absolute)
answer<-abs(x[1]-x[3])
answer
x[1]
x[3]
debug(ls)
ls
debug(ls)
Q
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
clear
nn
clear
swirl
swirl()
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
submit()
tbl
pack_sum
quantile(pack_sum,probs=0.99
)
quantile(pack_sum$count,probs=0.99
)
top_counts <- pack_sum(pack_sum$count>697,)
top_counts <- pack_sum[pack_sum$count>697,]
top_counts <- filter(pack_sum,count>679)
top_counts <- pack_sum[pack_sum$count>679,]
top_counts
head(top_counts,20)
arrange(top_count,count)
arrange(top_counts,count)
arrange(top_counts,desc(count)
)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique,desc(unique))
submit()
submit()
?chain
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
gather(students2,sex,count,-grade)
gather(students2,sex_class,count,-grade)
res<-gather(students2,sex_class,count,-grade)
res
?separate
separate(res,sex_count,c("sex","class"))
separate(res,sex_class,c("sex","class"))
submit()
submit()
students3
submit()
submit()
?spread
?spread
submit()
submit()
extract_numeric("class5")
submit()
submit()
students4
submit()
submit()
?unique
submit()
submit()
passed
failed
mutate(passed,status="passed"|final=c("A","B"))
mutate(passed,status="passed")
passed<-passed%>%mutate(status="passed")
failed<-failed%>%mutate(status="failed")
rbind_list(passed,failed)
sat
?separate
submit()
submit()
Sys.getlocale("LC_TIME")
library(libricate)
library(lubricate)
library(lubridate)
help(package=lubridate)
today()
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
second(this_moment)
ymd("1989-05-17")
my_Date<-ymd("1989-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt1
dt2
ymd(dt2)
update(this_moment,hms("8:34:55"))
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
update(this_moment,now())
this_moment<-update(this_moment,now())
this_moment<-update(this_moment,hours=10,minutes=16,seconds=0)
this_moment
nyc<-now("America/New York")
nyc<-now("America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time<-mdy("June 17,2008",tz="Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
how_long
as.period(how_long)
stopwatch()
setwd("~/workspace/coursera/reproducibleResearch/project2/ReproducibleRearch-peerAssessment2/ReproducibleRearch-peerAssessment2")
unzip("repdata-data-StormData.csv.bz2")
stdata <- read.csv(bzfile("repdata-data-StormData.csv"))
stdata <- read.csv(bzfile("repdata-data-StormData.csv.bz2"))
View(stdata)
stdata$cropDamage <- 1
#extract the K, M and B logical indices
kindices <- stdata$CROPDMGEXP == 'K'
mindices <- stdata$CROPDMGEXP == 'M'
bindices <- stdata$CROPDMGEXP == 'B'
# assign 1000, 1000000 and 1000000000 to replace the K, M and B
stdata$cropDamage[kindices] <- 1000
stdata$cropDamage[mindices] <- 1000000
stdata$crop[bindices] <- 1000000000
#multiply with CROPDMG column to get the actual economic damage for this event
stdata$cropDamage <- stdata$CROPDMG * stdata$cropDamage
stdata$economicDamage <- 1
#extract the K, M and B logical indices
kindices <- stdata$PROPDMGEXP == 'K'
mindices <- stdata$PROPDMGEXP == 'M'
bindices <- stdata$PROPDMGEXP == 'B'
# assign 1000, 1000000 and 1000000000 to replace the K, M and B
stdata$economicDamage[kindices] <- 1000
stdata$economicDamage[mindices] <- 1000000
stdata$economicDamage[bindices] <- 1000000000
#multiply with PROPDMG column to get the actual economic damage for this event
#add the corresponding crop damage to this value
stdata$economicDamage <- (stdata$PROPDMG * stdata$economicDamage) + stdata$cropDamage
View(stdata)
ed <- aggregate(stdata$economicDamage, by=list(stdata$EVTYPE), FUN=sum)
names(ed) <- make.names(c("evtype","economicDamage"))
# sort the data by economicDamage in desending order
ed_ordered <- ed[order(-ed[,2]),]
ed_ordered$cufrac <- cumsum(ed_ordered$economicDamage)/sum(ed_ordered$economicDamage)
top95_e <- ed_ordered[ed_ordered$cufrac < 0.95,]
#total number of events
nrow(ed_ordered)
#total number of events contributing to the 95% of total economic damage
nrow(top95_e)
#list of these events contributing to the 95% of total economic damage
top95_e
events <- top95_e$evtype[1:10]
labels <- paste(seq(1:10),events,sep=":")
ramp <- colorRamp(c("red","yellow","blue"))
barplot(top95_e$economicDamage[1:10], main = "Top 10 Events that have resulted in the highest property Damage in USD", xlab = "Disaster Events", ylab = "US Dollars", names.arg = seq(1:10), legend = labels, col = rgb(ramp(seq(0,1,length=10)),max=255))
ed_in_billions <- top95_e$economicDamage[1:10]/1000000000
ed_in_billions
events <- top95_e$evtype[1:10]
ed_in_billions <- top95_e$economicDamage[1:10]/1000000000
labels <- paste(seq(1:10),events,sep=":")
ramp <- colorRamp(c("red","yellow","blue"))
barplot(ed_in_billions, main = "Top 10 Events that have resulted in the highest property Damage in Billions USD", xlab = "Disaster Events", ylab = "US Dollars", names.arg = seq(1:10), legend = labels, col = rgb(ramp(seq(0,1,length=10)),max=255))
View(top95_e)
